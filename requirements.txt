Requirements
------------
DiUS is starting a computer store. You have been engaged to build the checkout system.

We will start with the following products in our catalogue:
| SKU | Name        |    Price |
| ipd | Super iPad  |  $549.99 |
| mbp | MacBook Pro | $1399.99 |
| atv | Apple TV    |  $109.50 |
| vga | Vga adapter |   $30.00 |

As we're launching our new computer store, we would like to have a few opening specials:
- We're going to have a 3 for 2 deal on Apple TVs, e.g., if you buy 3 Apple TVs, you pay the price of 2.
- The brand new Super iPad will have a bulk discount applied. The price will drop to $499.99 each, if one buys more than 4.
- We will bundle in a VGA adapter free of charge with every MacBook Pro sold

As our Sales manager is quite indecisive, we want the pricing rules to be flexible as they can change in the future with little notice.

Our checkout system can scan items in any order.

The interface to our checkout looks like this (shown in java):

  au.com.dius.shop.Checkout co = new au.com.dius.shop.Checkout(pricingRules);
  co.scan(item);
  co.scan(item);
  co.total();

Implement a checkout system that fulfills these requirements.


Example Scenarios
-----------------

SKUs Scanned: atv, atv, atv, vga
Total expected: $249.00

SKUs Scanned: mbp, vga, ipd
Total expected: $1949.98

SKUs Scanned: atv, ipd, ipd, atv, ipd, ipd, ipd
Total expected: $2718.95


Notes on implementation:
------------------------

- use Java, Ruby, Groovy, Scala or Python
- try not to spend more than an hour on this, 2 hours maximum. (We don't want you to lose a weekend over this!)
- don't build guis etc, we're more interested in your approach to solving the given task, not how shiny it looks.
- don't use any frameworks (rails, spring etc), or any external jars/gems (unless it's for testing)

When you're finished put your solution on github and send us a link to it at jlowe@dius.com.au. Happy coding :)
